{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Connectivity Planning Platform Developer Documentation","text":""},{"location":"#background","title":"Background","text":"<p>The Connectivity Planning Platform is a suite of models designed for the analysis of telecommunication infrastructure data and to plan the connectivity of Points of Interest (POIs). The models hosted on this platform include:</p> <ul> <li>Proximity: to assess the proximity of POIs to ICT infrastructure</li> <li>Coverage: to assess the coverage status for POIs (including 3G, 4G, 5G)</li> <li>Demand: to estimate the number of internet users at each POI and the required throughput</li> <li>Visibility: to assess the feasibility of point-to-point microwave links that require line-of-sight visibility</li> <li>Fiber Path: to simulate the optimal fiber path connecting POIs to transmission nodes</li> <li>Cost Model: to evaluate the cost (capital and operational expenditures) of deploying connectivity solutions</li> <li>Technology Assignment: to select the mix of technologies (among fiber, point-to-area, point-to-point and satellite) that maximize operator revenues, under budgetary and technological constraints</li> </ul> <p>This documentation serves as a guide to developers of the Connectivity Planning Platform, providing insights into its functionality and application.</p>"},{"location":"#how-to-read-this-documentation","title":"How to read this documentation?","text":"<p>This documentation is aimed at a technical audience, including those who will fine-tune models to suit their analysis needs and those who wish to contribute to the development of the platform.</p> <p>Many of the tools in this platform are inter-related. The outputs of some models are required to run dependent models. For an overview of the end-to-end analysis workflow and the model dependencies, start with the Model Integration Framework then read about the individual models.</p>"},{"location":"assignment/","title":"Technology Assignment","text":""},{"location":"assignment/#overview","title":"Overview","text":"<p>This model identifies the optimal technology for unconnected points of interest (POI), based on total deployment costs or other user-specified criteria. Technologies evaluated include: fiber, cellular (point-to-area), point-to-point microwave (p2p), and satellite. The optimal solutions are determined by solving an optimization problem that maximizes total net revenues, subject to technological constraints. The model incorporates feasibility assessments for each technology at each POI, drawing on information provided by other models in the toolkit.</p> <p>Key features:</p> <ul> <li>Determines the optimal mix of technologies for all unconnected POIs to maximize total operator profits.</li> <li>Connects all POIs when no maximum budget exists, or selectively connects POIs to maximize operator profits within budget constraints.</li> </ul>"},{"location":"assignment/#dependencies","title":"Dependencies","text":"<p>The <code>Technology Assignment</code> model has multiple dependencies, which are explained in the Model Integration Framework page of this documentation and also summarized below.</p> <ul> <li>Fiber Path: The <code>Fiber Path</code> model determines which POIs can be connected to the fiber network given a constraint on the length of a fiber line. This determines which POIs it is feasible to connect with fiber. In short, POIs that are too far away from a transmission node cannot be connected with fiber.</li> <li>Visibility: The <code>Visibility</code> model determines which POIs are visible from at least one cell site. Radio links using point-to-point microwave technology require visibility. Therefore, this model determines which POIs it is feasible to connect with this technology.</li> <li>Coverage: The <code>Coverage</code> model assesses which POIs are located in an area with 3G, 4G or 5G coverage. If at least one of those cellular technologies are available, then it is feasible to connect those POIs using point-to-area technology.</li> </ul> <p>Moreover, the <code>Technology Assignment</code> model also requires the user to provide a <code>Cost</code> model. This is in order to: i) compare the deployment cost of different technologies and ii) report the cost associated with the final technology assignment solution. The <code>Cost</code> model itself also has its own model dependencies. First, it requires the output from the <code>Fiber Path</code> model to estimate the amount of fiber line and therefore fiber CAPEX cost for each POI. Second, it requires the <code>Demand</code> model which estimates the <code>total_mbps</code> metric, the total required throughput at each POI. This quantity is used to compute the revenues an operator can expect to recover at each POI.</p>"},{"location":"assignment/#technology-feasibility-criteria","title":"Technology Feasibility Criteria","text":"<p>First, the <code>Technology Assignment</code> model assesses which technologies are feasible for each POI based on the criteria below.</p> <p>Table. Technology feasibility criteria.</p> Technology Feasibility criteria fiber The POI must be within a configured distance to a transmission node, or another fiber-connected POI p2area The POI must be within a 3G, 4G or 5G coverage area p2p The POI must be visible from a cell site or another POI satellite Always feasible"},{"location":"assignment/#optimization-problem","title":"Optimization Problem","text":""},{"location":"assignment/#defining-the-problem","title":"Defining the Problem","text":"<p>The diagram below summarizes the optimization problem solved by the <code>Technology Assignment</code> model. This is a linear programming problem solved using the CBC solver and the PuLP Python library.</p> <p>If there is no maximum budget, the solver maximizes the operator's total net revenue while connecting all POIs. If there is a maximum budget, the solver maximizes the operator's revenue while keeping the costs under the maximum budget. The operator revenues are derived using each POI's required throughpout (in Mbps). POIs with more people living around them generate higher revenues for the operator (see Cost Model).</p> <p>Figure. Optimization problem.</p> <p></p>"},{"location":"assignment/#special-case-user-defined-technology-ranking","title":"Special Case: User-defined Technology Ranking","text":"<p>It is possible to assign technologies based on other criteria than costs and revenues. For example, users can specify a preferred ranking of technologies such as the one below:</p> <pre><code>ranking = {\"fiber\": 1, \"p2area\": 2, \"p2p\": 3, \"satellite\": 4}\n</code></pre> <p>In the case above, fiber is always the preferred option, followed by p2area, p2p and satellite. As before, a technology can only be assigned to a POI if it is feasible. These preferences may be related to the quality, policies or regulations. If such a ranking is provided, the costs in the objective function default to zero for all technologies and the revenues are the values from this ranking dictionary. Therefore, the decision on which technology to select for a POI is no longer based on revenue but on those pre-specified preferences.</p>"},{"location":"assignment/#additional-constraints-related-to-technologies","title":"Additional Constraints Related to Technologies","text":""},{"location":"assignment/#fiber","title":"Fiber","text":"<p>The optimization problem has additional constraints related to fiber connectivity. These constraints are derived from the output of the <code>Fiber Path</code> model. In the example below, new fiber connections cannot be longer than 5 km. Therefore, \\(POI_{B}\\) cannot directly connect to the nearest transmission node because it is 6 km away. However, \\(POI_{B}\\) can become connected with fiber by connecting to nearby \\(POI_{A}\\) instead - provided that \\(POI_{A}\\) is also connected with fiber.</p> <p>Figure. Fiber constraints.</p> <p></p> <p>In this case, the decision variable \\(X_{B, fiber}\\) can only be equal to 1 if \\(X_{A, fiber}\\) is also equal to 1. This is expressed by adding a constraint to the model in the form of:</p> \\[X_{B, fiber} - X_{B, fiber} \\cdot X_{A, fiber} \\leq 0\\]"},{"location":"assignment/#point-to-point-microwave","title":"Point-to-point microwave","text":"<p>The optimization problem also has additional constraints related to point-to-point microwave connectivity (p2p).</p> <p>Figure. P2P constraints.</p> <p></p> <p>If a POI is not visible a cell site, it can still become connected with p2p if it is visible from another POI. However, if both a cell site and a POI are visible - the solver will favour establishing a radio link to the cell site rather than to another POI. In the example below, \\(POI_{B}\\) can connect using p2p only if \\(POI_{A}\\) is also connected (with any technology).</p>"},{"location":"assignment/#class-parameters","title":"Class Parameters","text":"Parameter Type Default Description used_technologies <code>dict</code> Required Specifies available technologies {'fiber', 'p2area', 'p2p', 'satellite': bool} poi_data <code>pd.DataFrame</code> Required Original POI data (incl. identifier, connection status, electricity availability) mapping_results <code>pd.DataFrame</code> Required Results from Proximity, Coverage and Demand models visibility_results <code>pd.DataFrame</code> Required Results from Visibilty model fiberpath_results <code>pd.DataFrame</code> Required Results from Fiber Path model primary_tech_params <code>dict</code> None Technology parameters for cost calculations (required if <code>cost_model</code> not provided) ranking_dictionary <code>dict</code> None User-defined  preferences for technology rankings {'fiber', 'p2area', 'p2p', 'satellite': int} max_fiber_dist_km_per_poi <code>int</code> None Maximum fiber connection distance per POI in km cost_model <code>CostModel</code> None Cost model for cost computations. If none is provided, <code>primary_tech_params</code> must be provided to create one. logger <code>logging.Logger</code> None Logger for output messages"},{"location":"assignment/#class-attributes","title":"Class Attributes","text":"Attribute Type Description used_technologies <code>dict</code> Dictionary of technologies to be used in the analysis ranking_dictionary <code>dict</code> User-defined technology preference rankings poi_data <code>pd.DataFrame</code> Original POI data (incl. POI identifier, connection status, electricity availability) mapping_results <code>pd.DataFrame</code> Results from Proximity, Coverage and Demand models visibility_results <code>pd.DataFrame</code> Results from Visibilty model fiberpath_results <code>pd.DataFrame</code> Results from Fiber Path model fiberpath_results_filtered <code>pd.DataFrame</code> Filtered fiberpath_results table based on max distance visibility_results_filtered <code>pd.DataFrame</code> Filtered visibility_results table based on POI and cell site distance (order column) poi_inputs <code>pd.DataFrame</code> Merged dataset of all inputs for analysis cost_model <code>CostModel</code> Model for cost computations time_periods <code>int</code> Number of time periods for analysis max_fiber_dist_km_per_poi <code>int</code> Maximum fiber connection distance per POI in km assignment_solution_table <code>pd.DataFrame</code> Results of technology assignment analysis logger <code>logging.Logger</code> Logger for output messages"},{"location":"assignment/#methods","title":"Methods","text":"Method Return Type Description check_columns() <code>None</code> Verifies that all required columns are present in <code>poi_inputs</code> check_feasibility() <code>pd.DataFrame</code> Evaluates technology feasibility for each POI get_fiber_dependencies() <code>dict</code> Retrieves the fiber path dependencies for each POI get_p2p_dependencies() <code>dict</code> Retrieves the P2P visibility dependencies for each POI perform_analysis(scenario=\"lowest_cost\", schedule=True, max_budget=None) <code>pd.DataFrame</code> Assigns optimal technology to POIs based on cost or ranking clear_assignment_solution_table() <code>None</code> Clears the current assignment solution table compute_solution_cost(costmodel=None, only_unconnected_pois=False) <code>pd.DataFrame</code> Computes costs for assigned technologies. It is possible to provide a different Cost model than the one used for the technology assignment with <code>costmodel</code>, and <code>only_unconnected_pois</code> controls whether we report costs for all or only unconnected POIs _update_fiberpath_results_filtered() <code>None</code> Updates filtered fiber path results when max distance changes _filter_visibility_output() <code>None</code> Filters visibility results to include only first-order connections _update_poi_inputs() <code>None</code> Updates the merged POI input dataset"},{"location":"assignment/#outputs","title":"Outputs","text":""},{"location":"assignment/#example","title":"Example","text":"<pre><code>import pandas as pd\nfrom giga_inframapkit.costmodel.costs import CostModel\nfrom giga_inframapkit.costmodel.techassignment import TechnologyAssigner\n\n# 1. Read required inputs\n\n    # POI data\npoi_df = pd.read_csv(\"input/points_of_interest.csv\")\npoi_df.head()\n\n# poi_id    is_connected    lat lon has_electricity electricity_type\n# 0 23dd6a45-3656-435b-b3b1-c16efab9daeb    False   39.007771   1.561872    False   NaN\n# 1 e13a657c-edf0-4013-92db-6c70136e3ac9    False   38.906858   1.275420    False   NaN\n# 2 de75c87b-2676-47be-8454-4c44c4e6f644    False   38.993134   1.353725    False   NaN\n# 3 4267fc81-0e9f-40ca-84c8-84529958dc22    False   39.004266   1.525952    False   NaN\n# 4 ae0ccc6e-5f91-4a58-a60b-68e8ebcdc797    False   38.956769   1.323312    False   NaN\n\n    # Results from Proximity, Coverage, Demand models\npcd_results_df = pd.read_json(\"input/pcd.json\")\npcd_results_df.head()\n\n#   poi_id  lat lon cell_site_dist  transmission_node_dist  population  poi_count   number_of_users total_mbps  coverage\n# 0 23dd6a45-3656-435b-b3b1-c16efab9daeb    39.007771   1.561872    {'any': 1158, '2G': 2365, '3G': 2475, '4G': 11...   {'any': 2559, 'fiber': 2559}    {'population_1km': 443, 'population_2km': 2885...   {'poi_count_1km': 1, 'poi_count_2km': 4, 'poi_...   443 2215    {'4G': True}\n\n    # Results from Visibility model\nvisibility_results_df = pd.read_csv(\"input/visibility.csv\")\nvisibility_results_df.head()\n\n# poi_id    ict_id  radio_type  ground_distance antenna_los_distance    azimuth_angle   geometry    is_visible  num_visible order   visible_pois    is_visible_pois\n# 0 23dd6a45-3656-435b-b3b1-c16efab9daeb    f7412e93-8fb4-4abf-a298-8fb0876a97f5    4G  1502.0  1503.0  189.86  LINESTRING (1.561872175 39.00777101, 1.5588949...   True    1   1   ['4267fc81-0e9f-40ca-84c8-84529958dc22', '386b...   True\n# 1 e13a657c-edf0-4013-92db-6c70136e3ac9    8a4cfe6a-ce1a-4096-84dc-be09b32b8567    4G  4814.0  4825.0  143.54  LINESTRING (1.2754202 38.90685783, 1.308471633...   True    1   1   ['40a28229-3dbf-4f08-a516-3f46680a2e55', '8c09...   True\n\n    # Results from Fiber Path model\nfiberpath_results_df = pd.read_csv(\"input/fiberpath.csv\")\nfiberpath_results_df.head()\n\n# poi_id    closest_node_id closest_node_distance   connected_node_id   connected_node_distance fiber_path  upstream_node_id    upstream_node_distance  cluster_id  max_dist_km in_mst_solution n_conns\n# 0 2b2ca058-e2b5-4ce2-a075-c3075f9027ef    c43ce78b-33f7-45b5-8763-ae7bca7fb995    3002.713    c43ce78b-33f7-45b5-8763-ae7bca7fb995    3002.713    ['c43ce78b-33f7-45b5-8763-ae7bca7fb995']    c43ce78b-33f7-45b5-8763-ae7bca7fb995    3002.713    1   50.0    True    1\n# 1 5a88dfd9-2448-4643-8446-ec81f79f236e    3555590c-de40-4e86-93df-8524dbc6c4c7    4240.552    541c5949-ab47-4a42-83df-2f5653718d5a    8397.644    ['541c5949-ab47-4a42-83df-2f5653718d5a', 'ba2f...   955bca73-4483-45af-ae38-adddd0751bf7    3318.664    1   50.0    True    3\n\n    # Microeconomic inputs (e.g. cost per km of fiber)\ncost_inputs_df = pd.read_csv(\"input/cost_inputs.csv\")\ncost_inputs_df.head()\n\n#   Variable name   Value\n# 0 hw_setup_cost_fiber 500.0\n# 1 focl_constr_cost_fiber  8000.0\n# 2 reinv_period_fiber  5.0\n# 3 an_hw_maint_and_repl_fiber  0.1\n# 4 an_traffic_fees_one_mbps_fiber  12.0\n\n# 2. Specify which technologies can be considered\n\nused_technologies = {\n    'fiber': True,\n    'p2area': True,\n    'p2p': True,\n    'satellite': True\n}\n\n# 2. Create a TechnologyAssigner instance\n\nassigner = TechnologyAssigner(\n    used_technologies=used_technologies,\n    poi_data = poi_df,\n    mapping_results=pcd_results_df,\n    visibility_results=visibility_results_df,\n    fiberpath_results=fiberpath_results_df,\n    primary_tech_params=cost_inputs_df\n    )\n\n# 2025-04-02 10:35:26,717 - cost_ESP - INFO - A new cost model has been set up.\n# 2025-04-02 10:35:26,724 - cost_ESP - INFO - Time periods set to 10.\n\n# 3. Perform analysis without a maximum budget\n\nassigner.perform_analysis(\n    scenario=\"lowest_cost\",\n    max_budget=None\n    )\n\n# 2025-04-02 10:36:30,892 - cost_ESP - INFO - Checking the feasibility of technologies...\n# 2025-04-02 10:36:30,974 - cost_ESP - INFO - Using the ranking scenario to assign technologies...\n# 2025-04-02 10:36:30,982 - cost_ESP - INFO - Setting up the optimization problem...\n# 2025-04-02 10:36:30,986 - cost_ESP - INFO - There are 100 POIs with at least one feasible technology.\n# 2025-04-02 10:36:30,996 - cost_ESP - INFO - Optimizer parameter 'schedule' is set to False, meaning that connections lasts either 10 or 0 periods.\n# 2025-04-02 10:36:31,005 - cost_ESP - INFO - Getting optimizer constraints related to fiber...\n# 2025-04-02 10:36:31,009 - cost_ESP - INFO - Getting optimizer constraints related to P2P...\n# 2025-04-02 10:36:31,011 - cost_ESP - INFO - Optimizing the NPV and connecting all POIs without a maximum budget...\n# 2025-04-02 10:36:31,012 - cost_ESP - INFO - Number of optimizer variables: 433\n# 2025-04-02 10:36:31,013 - cost_ESP - INFO - Number of optimizer constraints: 601\n# 2025-04-02 10:36:31,013 - cost_ESP - INFO - Starting optimization...\n# 2025-04-02 10:36:32,430 - cost_ESP - INFO - Solution Status: 1, Optimal\n# 2025-04-02 10:36:32,443 - cost_ESP - INFO - No POIs connected with p2p in time period 0, skipping path constraint check.\n\n# Welcome to the CBC MILP Solver \n# Version: 2.10.3 \n# Build Date: Dec 15 2019 \n\n# Result - Optimal solution found\n\n# Objective value:                4000.00000000\n# Enumerated nodes:               0\n# Total iterations:               0\n# Time (CPU seconds):             0.01\n# Time (Wallclock seconds):       0.02\n\n# Option for printingOptions changed from normal to all\n# Total time (CPU seconds):       0.01   (Wallclock seconds):       0.03\n\n# 4. Perform analysis without a maximum budget, only report costs for unconnected POIs\n\ncost_solution = assigner.compute_solution_cost(only_unconnected_pois=True)\ncost_solution.head()\n\n#                                   annual_cost annual_cost_per_poi annual_revenue  annual_revenue_per_poi  init_capex  pp_coo  pp_coo_per_poi  pp_profit   pp_profit_per_poi   pp_revenue  pp_revenue_per_poi  first_connected_period  number_of_periods\n# poi_id    pp  max_dist_km technology  is_connected    lat lon upstream_node_distance  bound                                                   \n# 005e4a38-ee50-41b2-a7ba-fd8fd86c5179  10  50  fiber   False   38.930953   1.286008    2762.078    central 5111.3  5111.3  13200.0 13200.0 24806.3 51112.6 51112.6 80887.4 80887.4 132000.0    132000.0    0   10\n# 019d2f45-228e-4943-b302-1af7cb2ae820  10  50  fiber   False   38.942632   1.238764    3284.765    central 6031.2  6031.2  57240.0 57240.0 29405.9 60311.9 60311.9 512088.1    512088.1    572400.0    572400.0    0   10\n</code></pre>"},{"location":"costmodel/","title":"Costs","text":""},{"location":"costmodel/#overview","title":"Overview","text":"<p>The CostModel class calculates deployment and operational costs for telecommunications infrastructure. It provides cost analysis for multiple technology options (fiber, cellular, point-to-point, satellite, and electricity) to support infrastructure planning decisions, computing capital expenditures (CAPEX), operational expenditures (OPEX), and operator revenue projections for each technology option.</p> <p>Key features:</p> <ul> <li>Multi-technology cost analysis (fiber, cellular, point-to-point, satellite, electricity)</li> <li>Capital expenditure (CAPEX) calculations including equipment and installation costs</li> <li>Operational expenditure (OPEX) calculations including maintenance and traffic fees</li> <li>Operator revenue projections based on throughput requirements</li> <li>Cost of ownership analysis over multiple time periods</li> <li>Per-POI cost breakdowns for detailed planning</li> </ul>"},{"location":"costmodel/#class-parameters","title":"Class Parameters","text":"Parameter Type Default Description primary_tech_params <code>pd.DataFrame</code> Required DataFrame containing technology parameters with columns 'Variable name' and 'Value'. Must include all parameters defined in get_required_keys() logger <code>logging.Logger</code> <code>None</code> Logger instance for logging messages expansion_factor <code>float</code> <code>1.1</code> Factor to increase the amount of fiber line required by 10% (or other amount) <p>Example of <code>primary_tech_params</code> input</p> Technology Parameter Variable name Value Measurement unit fiber On-premises hardware setup cost\u200b (materials, equipment, labor) hw_setup_cost_fiber 500 USD per school\u200b fiber Fiber optical cable line\u200b construction cost (materials, equipment, labor) focl_constr_cost_fiber 8000 USD per km\u200b fiber Hardware refresh after reinv_period_fiber 5 Years fiber Annual hardware maintenance and replacement costs\u200b an_hw_maint_and_repl_fiber 0.1 USD per year\u200b (as a fraction of hardware CapEx\u200b) fiber Annual transit bandwidth cost for 1 Mbps of dedicated internet access channel over a fiber optic cable line an_traffic_fees_one_mbps_fiber 12 USD per Mbps per year fiber Annual access bandwidth cost for 1 Mbps of dedicated internet access channel over a fiber optic cable line an_isp_fees_one_mbps_fiber 31.8 USD per Mbps per year fiber Time required to install fiber infrastructure invest_time_fiber 0 Years p2area On-premises hardware setup cost\u200b (materials, equipment, labor) hw_setup_cost_p2area 80 USD per school\u200b p2area Reinvest into hardware after reinv_period_p2area 3 Years p2area Annual hardware maintenance and replacement costs\u200b an_hw_maint_and_repl_p2area 0.1 USD per year\u200b (as a fraction of hardware CapEx\u200b) p2area Annual Traffic fee for 1 Mbps of dedicated internet access channel over cellular network an_traffic_fees_one_mbps_p2area 12 USD per Mbps per year p2area Annual ISP fee for 1 Mbps of dedicated internet access channel over cellular network an_isp_fees_one_mbps_p2area 24 USD per Mbps per year p2area Time required to install cellular infrastructure invest_time_p2area 0 Years p2p On-premises hardware setup cost\u200b (materials, equipment, labor) hw_setup_cost_p2p 500 USD per school\u200b p2p Microwave point-to-point access link installation and comissioning cost (materials, equipment, labor) access_link_setup_p2p 831.59 USD per hop\u200b p2p Number of microwave point-to-point backhaul links backhaul_link_num_p2p 0 Links p2p Microwave point-to-point backhaul link installation and comissioning cost (materials, equipment, labor) backhaul_link_setup_p2p 2825.07 USD per hop\u200b p2p Number of retransmission telecommunication towers retr_tower_num_p2p 0 Towers p2p Retransmission telecommunication tower installation cost retr_tower_inst_p2p 13000 USD per tower p2p Bandwidth per access link access_link_bandwidth_p2p 10 MHz p2p Bandwidth per backhaul link backhaul_link_bandwidth_p2p 20 MHz p2p One time license fee for 1MHz one_time_license_fee_1mhz_p2p 500 USD per MHz p2p Reinvest into hardware after reinv_period_p2p 5 Years p2p Annual hardware maintenance and replacement costs\u200b an_hw_maint_and_repl_p2p 0.004 USD per year\u200b (as a fraction of hardware CapEx\u200b) p2p Annual recurring license fee for 1MHz an_license_fee_1mhz_p2p 100 USD per MHz per year p2p Annual Traffic fee for 1 Mbps of dedicated internet access channel over a P2P microwave link an_traffic_fees_one_mbps_p2p 12 USD per Mbps per year p2p Annual ISP fee for 1 Mbps of dedicated internet access channel over a P2P microwave link an_isp_fees_one_mbps_p2p 24 USD per Mbps per year p2p Time required to install P2P infrastructure invest_time_p2p 0 Years satellite On-premises hardware setup cost\u200b (materials, equipment, labor) hw_setup_cost_sat 3000 USD per school\u200b satellite Reinvest into hardware after reinv_period_sat 5 Years satellite Annual hardware maintenance and replacement costs\u200b an_hw_maint_and_repl_sat 0.04 USD per year\u200b (as a fraction of hardware CapEx\u200b) satellite Annual Traffic fee for 1 Mbps of dedicated internet access channel over satellite channel an_traffic_fees_one_mbps_sat 12 USD per Mbps per year satellite Annual ISP fee for 1 Mbps of dedicated internet access channel over satellite channel an_isp_fees_one_mbps_sat 24 USD per Mbps per year satellite Time required to install satellite infrastructure invest_time_sat 0 Years Electricity On-premises hardware setup cost\u200b (materials, equipment, labor) hw_setup_cost_electricity 0 USD per school\u200b Electricity Reinvest into hardware after reinv_period_electricity 1 Years Electricity Annual hardware maintenance and replacement costs\u200b an_hw_maint_and_repl_electricity 0 USD per year\u200b (as a fraction of hardware CapEx\u200b) Finance Interest rate interest_rate 0.02 Percentage Overall Project planning period pp 10 Years"},{"location":"costmodel/#class-attributes","title":"Class Attributes","text":"Attribute Type Description primary_tech_params <code>pd.DataFrame</code> DataFrame containing technology parameters expansion_factor <code>float</code> Factor for expanding fiber optic cable length in calculations logger <code>logging.Logger</code> Logger instance for logging messages"},{"location":"costmodel/#methods","title":"Methods","text":"Method Return Type Description get_required_keys() <code>list</code> Returns list of required parameter names for cost calculations validate_inputs(primary_tech_params) <code>None</code> Validates the input parameters compute_fiber_costs(poi_num, ch_throughput, focl_length_fiber, pp) <code>pd.DataFrame</code> Calculates fiber network deployment costs compute_p2area_costs(poi_num, ch_throughput, pp) <code>pd.DataFrame</code> Calculates cellular (point-to-area) network deployment costs compute_p2p_costs(poi_num, ch_throughput, pp) <code>pd.DataFrame</code> Calculates point-to-point network deployment costs compute_satellite_costs(poi_num, ch_throughput, pp) <code>pd.DataFrame</code> Calculates satellite network deployment costs compute_electricity_costs(poi_num, pp) <code>pd.DataFrame</code> Calculates electricity costs perform_analysis(poi_data) <code>pd.DataFrame</code> Computes POI-level costs across all technology options for a given dataset <p>The cost calculation methods (<code>compute_fiber_costs</code>, <code>compute_p2area_costs</code>, <code>compute_p2p_costs</code>, <code>compute_satellite_costs</code>, <code>compute_electricity_costs</code>) each produce a <code>pd.DataFrame</code> output with the following keys:</p> <ul> <li><code>technology</code>: The technology type being analyzed (in this example \"satellite\", but could also be fiber, p2area, p2p, or electricity)</li> <li><code>number_poi</code>: Number of points of interest (POIs) included in this calculation</li> <li><code>ch_throughput</code>: Channel throughput in Mbps (megabits per second)</li> <li><code>pp</code>: Planning period in years - the time horizon for the analysis</li> <li><code>pp_profit</code>: Total profit over the entire planning period - calculated as revenue minus cost of ownership</li> <li><code>pp_profit_per_poi</code>: Average profit per POI over the entire planning period</li> <li><code>pp_revenue</code>: Total revenue generated over the entire planning period</li> <li><code>pp_revenue_per_poi</code>: Average revenue per POI over the entire planning period</li> <li><code>pp_coo</code>: Total cost of ownership over the entire planning period (includes both CAPEX and OPEX)</li> <li><code>pp_coo_per_poi</code>: Average cost of ownership per POI over the entire planning period</li> <li><code>init_capex</code>: Initial capital expenditure - the upfront investment required to deploy the technology</li> <li><code>annual_revenue</code>: Average annual revenue (calculated as total planning period revenue divided by number of years)</li> <li><code>annual_revenue_per_poi</code>: Average annual revenue per POI</li> <li><code>annual_cost</code>: Average annual cost (includes CAPEX and OPEX)</li> <li><code>annual_cost_per_poi</code>: Average annual cost per POI - a key metric for comparing the cost-effectiveness of different technologies</li> </ul> <p>The method <code>perform_analysis(poi_data)</code> should be provided with an input DataFrame with the following columns:</p> <ul> <li><code>poi_id</code>: unique identifier (UUID)</li> <li><code>total_mbps</code>: total throughput in Mbps for each POI (estimated using the <code>Demand</code> module of the toolkit)</li> <li><code>upstream_node_distance</code>: distance to the nearest transmission node (or connected POI) according the the <code>FiberPath</code> solution. This is the additional length of fiber required to connect the POI to the fiber network.</li> <li><code>has_electricity</code>: whether the POI is already electrified or not (<code>bool</code>).</li> </ul> poi_id total_mbps upstream_node_distance has_electricity 09b90515-0ecc-4992-9d39-ae208e1c1fea 415 0 True 0c16c2e8-db92-411b-a6f7-535fb1810e34 1210 0 True 1205e5ef-5d91-47b7-8fc0-11ef019263e5 7640 1682.919 True 1534adf8-b45c-443b-8e1d-87a504e6dc64 865 1887.719 True 192c1704-9e7e-4b7a-8ba7-0eed5ae771ad 79410 906.343 True <p>The output is structured as a multi-indexed pandas DataFrame with the following index levels:</p> <ul> <li><code>poi_id</code>: Unique identifier for each point of interest</li> <li><code>pp</code>: Planning period (year number from 1 to the total project planning period)</li> <li><code>technology</code>: Technology type (fiber, p2area, p2p, satellite and electricity)</li> <li><code>metric</code>: Cost metric (e.g., pp_profit, annual_cost_per_poi, pp_revenue, etc.)</li> </ul> <p>The <code>value</code> column contains the actual numerical results for each combination of indices.</p>"},{"location":"costmodel/#summary-of-cost-models","title":"Summary of Cost Models","text":""},{"location":"costmodel/#fiber","title":"Fiber","text":"<p>Table. Fiber cost model parameters.</p> Technology Parameter Variable name Value Measurement unit fiber On-premises hardware setup cost\u200b (materials, equipment, labor) hw_setup_cost_fiber 500 USD per school\u200b fiber Fiber optical cable line\u200b construction cost (materials, equipment, labor) focl_constr_cost_fiber 8000 USD per km\u200b fiber Hardware refresh after reinv_period_fiber 5 Years fiber Annual hardware maintenance and replacement costs\u200b an_hw_maint_and_repl_fiber 0.1 USD per year\u200b (as a fraction of hardware CapEx\u200b) fiber Annual transit bandwidth cost for 1 Mbps of dedicated internet access channel over a fiber optic cable line an_traffic_fees_one_mbps_fiber 12 USD per Mbps per year fiber Annual access bandwidth cost for 1 Mbps of dedicated internet access channel over a fiber optic cable line an_isp_fees_one_mbps_fiber 31.8 USD per Mbps per year <p>Figure. Fiber cost model.</p> <p></p>"},{"location":"costmodel/#cellular","title":"Cellular","text":"<p>Table. Cellular cost model parameters.</p> Technology Parameter Variable name Value Measurement unit p2area On-premises hardware setup cost\u200b (materials, equipment, labor) hw_setup_cost_p2area 80 USD per school\u200b p2area Reinvest into hardware after reinv_period_p2area 3 Years p2area Annual hardware maintenance and replacement costs\u200b an_hw_maint_and_repl_p2area 0.1 USD per year\u200b (as a fraction of hardware CapEx\u200b) p2area Annual Traffic fee for 1 Mbps of dedicated internet access channel over cellular network an_traffic_fees_one_mbps_p2area 12 USD per Mbps per year p2area Annual ISP fee for 1 Mbps of dedicated internet access channel over cellular network an_isp_fees_one_mbps_p2area 24 USD per Mbps per year p2area Time required to install cellular infrastructure invest_time_p2area 0 Years <p>Figure. Cellular cost model.</p> <p></p>"},{"location":"costmodel/#point-to-point-microwave","title":"Point-to-point microwave","text":"<p>Table. Point-to-point microwave cost model parameters.</p> Technology Parameter Variable name Value Measurement unit p2p On-premises hardware setup cost\u200b (materials, equipment, labor) hw_setup_cost_p2p 500 USD per school\u200b p2p Microwave point-to-point access link installation and comissioning cost (materials, equipment, labor) access_link_setup_p2p 831.59 USD per hop\u200b p2p Number of microwave point-to-point backhaul links backhaul_link_num_p2p 0 Links p2p Microwave point-to-point backhaul link installation and comissioning cost (materials, equipment, labor) backhaul_link_setup_p2p 2825.07 USD per hop\u200b p2p Number of retransmission telecommunication towers retr_tower_num_p2p 0 Towers p2p Retransmission telecommunication tower installation cost retr_tower_inst_p2p 13000 USD per tower p2p Bandwidth per access link access_link_bandwidth_p2p 10 MHz p2p Bandwidth per backhaul link backhaul_link_bandwidth_p2p 20 MHz p2p One time license fee for 1MHz one_time_license_fee_1mhz_p2p 500 USD per MHz p2p Reinvest into hardware after reinv_period_p2p 5 Years p2p Annual hardware maintenance and replacement costs\u200b an_hw_maint_and_repl_p2p 0.004 USD per year\u200b (as a fraction of hardware CapEx\u200b) p2p Annual recurring license fee for 1MHz an_license_fee_1mhz_p2p 100 USD per MHz per year p2p Annual Traffic fee for 1 Mbps of dedicated internet access channel over a P2P microwave link an_traffic_fees_one_mbps_p2p 12 USD per Mbps per year p2p Annual ISP fee for 1 Mbps of dedicated internet access channel over a P2P microwave link an_isp_fees_one_mbps_p2p 24 USD per Mbps per year p2p Time required to install P2P infrastructure invest_time_p2p 0 Years <p>Figure. Point-to-point microwave cost model.</p> <p></p>"},{"location":"costmodel/#satellite","title":"Satellite","text":"<p>Table. Satellite cost model parameters.</p> Technology Parameter Variable name Value Measurement unit satellite On-premises hardware setup cost\u200b (materials, equipment, labor) hw_setup_cost_sat 3000 USD per school\u200b satellite Reinvest into hardware after reinv_period_sat 5 Years satellite Annual hardware maintenance and replacement costs\u200b an_hw_maint_and_repl_sat 0.04 USD per year\u200b (as a fraction of hardware CapEx\u200b) satellite Annual Traffic fee for 1 Mbps of dedicated internet access channel over satellite channel an_traffic_fees_one_mbps_sat 12 USD per Mbps per year satellite Annual ISP fee for 1 Mbps of dedicated internet access channel over satellite channel an_isp_fees_one_mbps_sat 24 USD per Mbps per year <p>Figure. Satellite cost model.</p> <p></p>"},{"location":"costmodel/#example","title":"Example","text":"<pre><code>import pandas as pd\nfrom giga_inframapkit.entities.pointofinterest import PointOfInterestCollection\nfrom giga_inframapkit.costmodel.costs import CostModel\n\n# 1. Set up your data collections\n\n# Points of Interest\npoi_df = pd.read_csv(\"input/points_of_interest.csv\")\npoi_df = poi_df[[\"poi_id\", \"has_electricity\"]]\n# Add columns 'total_mbps', 'upstream_node_distance' with random values\npoi_df['total_mbps'] = np.random.randint(10, 100, size=len(poi_df))\npoi_df['upstream_node_distance'] = np.random.uniform(100, 10000, size=len(poi_df)).round(3)\n\n# Microeconomic inputs (e.g. cost per km of fiber)\ncost_inputs_df = pd.read_csv(\"input/cost_inputs.csv\")\ncost_inputs_df.head()\n\n#   Variable name   Value\n# 0 hw_setup_cost_fiber 500.0\n# 1 focl_constr_cost_fiber  8000.0\n# 2 reinv_period_fiber  5.0\n# 3 an_hw_maint_and_repl_fiber  0.1\n# 4 an_traffic_fees_one_mbps_fiber  12.0\n\n# 2. Create a FiberPath analysis instance\n\ncostmodel = CostModel(cost_inputs_df, logger=None)\n\n# 3. Run the analysis\n\nall_costs = costmodel.perform_analysis(poi_df)\nall_costs.head()\n\n#               value\n# poi_id    pp  technology  metric  \n# 09b90515-0ecc-4992-9d39-ae208e1c1fea  1   fiber   pp_profit   4430.0\n# 0c16c2e8-db92-411b-a6f7-535fb1810e34  1   fiber   pp_profit   13970.0\n# 1205e5ef-5d91-47b7-8fc0-11ef019263e5  1   fiber   pp_profit   74839.3\n# 1534adf8-b45c-443b-8e1d-87a504e6dc64  1   fiber   pp_profit   -8443.1\n# 192c1704-9e7e-4b7a-8ba7-0eed5ae771ad  1   fiber   pp_profit   943596.6\n</code></pre>"},{"location":"coverage/","title":"Coverage","text":""},{"location":"coverage/#overview","title":"Overview","text":"<p>The Coverage class analyzes mobile coverage for points of interest (POIs). It determines whether POIs are located in areas with mobile coverage (2G, 3G, 4G, 5G, or satellite).</p> <p>Key features:</p> <ul> <li>Supports multiple analysis methods including coverage maps, proximity to cell sites, and buffer zones</li> <li>Handles different coverage types (2G, 3G, 4G, 5G, satellite)</li> <li>Provides summary statistics and formatted results</li> </ul>"},{"location":"coverage/#class-parameters","title":"Class Parameters","text":""},{"location":"coverage/#required","title":"Required","text":"<ul> <li>points_of_interest (<code>PointOfInterestCollection</code>): Collection of points of interest for analysis.</li> <li>mobile_coverage_type (<code>str</code>): Type of coverage to analyze ('2G', '3G', '4G', '5G', 'satellite').</li> </ul>"},{"location":"coverage/#optional","title":"Optional","text":"<ul> <li>mobile_coverage_data (<code>geopandas.GeoDataFrame</code>, optional): Coverage polygons with a 'coverage' column. Required when method='map'.</li> <li>cell_sites (<code>CellSiteCollection</code>, optional): Collection of cell sites. Required when method='cellsites' or 'buffer'.</li> <li>method (<code>str</code>, default='map'): Analysis method to use:<ul> <li>'map': Uses geographic coverage map polygons</li> <li>'buffer': Uses buffered areas around cell sites</li> </ul> </li> <li>buffer_distance (<code>int</code>, optional): Buffer size in meters for buffer method.</li> <li>logger (<code>logging.Logger</code>, optional): Logger instance. If None, a default logger is created.</li> </ul>"},{"location":"coverage/#class-attributes","title":"Class attributes","text":"<ul> <li>points_of_interest: Collection of points of interest</li> <li>cell_sites: Collection of cell sites (if provided)</li> <li>method: Selected analysis method</li> <li>mobile_coverage_data: GeoDataFrame of coverage polygons (if provided)</li> <li>mobile_coverage_type: Type of coverage being analyzed</li> <li>coverage_column: Column name for results (e.g., '4G_coverage')</li> <li>results_table: GeoDataFrame with coverage analysis results</li> <li>analysis_stats: Dictionary with coverage statistics</li> <li>analysis_param: Dictionary for analysis parameters</li> </ul>"},{"location":"coverage/#methods","title":"Methods","text":"<ul> <li>perform_analysis(): Executes coverage analysis using the selected method and prints a summary.</li> <li>get_results_table(): Returns a DataFrame with coverage results in a nested dictionary format.</li> <li>format_analysis_summary(): Returns a human-readable summary of the analysis statistics.</li> </ul>"},{"location":"coverage/#example","title":"Example","text":"<pre><code>import pandas as pd\nimport geopandas as gpd\nfrom giga_inframapkit.entities.pointofinterest import PointOfInterestCollection\nfrom giga_inframapkit.entities.cellsite import CellSiteCollection\nfrom giga_inframapkit.mapping.coverage import Coverage\n\n# 1. Set up your data collections\n\npoi_df = pd.read_csv(\"input/points_of_interest.csv\")\npoi_collection = PointOfInterestCollection()\npoi_collection.load_from_records(poi_df.to_dict('records'))\n\n# PointOfInterestCollection: 100 entities\n\ncoverage_data = gpd.read_file(\"input/mobile_coverage_4g.gpkg\")\n\n# 2. Create a Coverage analysis instance\n\ncoverage = Coverage(\n    points_of_interest = poi_collection,\n    mobile_coverage_data = coverage_data,\n    mobile_coverage_type = \"4G\"\n    )\n\n# 3. Run the analysis\n\ncoverage.perform_analysis()\n\n# 4G coverage Analysis Summary:\n# Number of points of interest: 100\n# Number of points of interest covered by signal: 8\n# Number of points of interest not covered by signal: 92\n# Time taken for analysis: 0.01 seconds\n\ncoverage.get_results_table()\n\n#   poi_id  coverage\n# 0 23dd6a45-3656-435b-b3b1-c16efab9daeb    {'4G': True}\n# 1 e13a657c-edf0-4013-92db-6c70136e3ac9    {'4G': False}\n# 2 de75c87b-2676-47be-8454-4c44c4e6f644    {'4G': False}\n# 3 4267fc81-0e9f-40ca-84c8-84529958dc22    {'4G': True}\n# 4 ae0ccc6e-5f91-4a58-a60b-68e8ebcdc797    {'4G': False}\n# ...   ... ...\n# 95    9b09549f-3f66-4a26-beda-db793cd49363    {'4G': True}\n# 96    a7a55e1e-6078-4457-89fd-ab69814da42e    {'4G': False}\n# 97    85495887-5439-4f49-82a9-8e0a031b9dc4    {'4G': False}\n# 98    798ec30c-be58-4b93-9ebb-e6979cf73336    {'4G': False}\n# 99    96f84def-7438-4e29-b45b-3368a83544ca    {'4G': True}\n</code></pre>"},{"location":"demand/","title":"Demand","text":""},{"location":"demand/#overview","title":"Overview","text":"<p>The Demand class analyzes population density and bandwidth requirements around points of interest (POIs). It calculates population counts within specified radii and estimates network traffic demand based on general population density.</p> <p>Figure. Population counts around Points of Interest using non-overlapping buffers.</p> <p></p> <p>Key features:</p> <ul> <li>Calculates population distribution within customizable radii around POIs</li> <li>Estimates bandwidth requirements based on population and per-user demand</li> <li>Supports non-overlapping catchment areas using Voronoi diagrams</li> </ul>"},{"location":"demand/#class-parameters","title":"Class Parameters","text":""},{"location":"demand/#required","title":"Required","text":"<ul> <li>points_of_interest (<code>PointOfInterestCollection</code>): Collection of points of interest for analysis.</li> <li>population_data_handler (<code>PopulationDataHandler</code>): Handler for accessing population data.</li> </ul>"},{"location":"demand/#optional","title":"Optional","text":"<ul> <li>radii (<code>list</code>, default=[1, 3, 5]): List of radii in kilometers for population analysis.</li> <li>radius_for_demand (<code>int</code>, default=1): Specific radius used for traffic demand calculations.</li> <li>mbps_demand_per_user (<code>int</code>, default=5): Throughput required per user in Mbps.</li> <li>overlap_allowed (<code>bool</code>, default=False): Whether to allow POI catchment areas to overlap.</li> <li>logger (<code>logging.Logger</code>, optional): Logger instance. Default created if None.</li> </ul>"},{"location":"demand/#class-attributes","title":"Class Attributes","text":"<ul> <li>points_of_interest: Collection of points of interest</li> <li>population_data_handler: Handler for population data</li> <li>population_data: Population dataset from the handler</li> <li>radii: List of radii for analysis</li> <li>radius_for_demand: Radius used for traffic calculations</li> <li>mbps_demand_per_user: Throughput required demand per user</li> <li>overlap_allowed: Boolean flag for catchment area overlap</li> <li>analysis_param: Dictionary of analysis parameters</li> <li>analysis_stats: Dictionary of analysis statistics</li> <li>analysis_results: Dictionary of raw analysis results</li> <li>traffic_demand: DataFrame of bandwidth requirements per POI</li> </ul>"},{"location":"demand/#methods","title":"Methods","text":"<ul> <li>perform_analysis(): Executes demand analysis based on population distribution around POIs.</li> <li>get_results_table(): Returns formatted results including traffic demand estimates.</li> <li>get_storage_table(): Returns raw analysis data.</li> <li>format_analysis_summary(): Returns a human-readable summary of analysis statistics.</li> </ul>"},{"location":"demand/#example","title":"Example","text":"<pre><code>import pandas as pd\nfrom giga_inframapkit.entities.pointofinterest import PointOfInterestCollection\nfrom giga_inframapkit.handlers.populationdatahandler import PopulationDataHandler\nfrom giga_inframapkit.mapping.demand import Demand\n\n# 1. Set up your data collections\n\npoi_df = pd.read_csv(\"input/points_of_interest.csv\")\npoi_collection = PointOfInterestCollection()\npoi_collection.load_from_records(poi_df.to_dict('records'))\n\n# PointOfInterestCollection: 100 entities\n\n# 2. Set up the population data handler, that downloads a raster file with population data into the data_dir - It has a method called population_data, that loads a GeoDataFrame with the values per pixel\n\npop_handler = PopulationDataHandler(\n    data_dir=\"input/population_data\",\n    country_code=\"ESP\",\n    dataset_year=2020,\n    one_km_res=True,\n    un_adjusted=True\n)\n\n# 3. Create a Demand analysis instance\n\ndemand = Demand(\n    points_of_interest = poi_collection,\n    population_data_handler = pop_handler,\n    radii = [1, 2, 3],\n    logger = None,\n    overlap_allowed = False,\n    mbps_demand_per_user = 5)\n\n# 3. Run the analysis\n\ndemand.perform_analysis()\n\n# Demand Analysis Summary:\n# Number of points of interest: 100\n# Country population count: 46754784.0\n# Mean population count of 1km area around a point of interest: 968.88\n# Median population count of 1km area around a point of interest: 231.0\n# Sum population count of 1km area around a point of interest: 96888\n# Mean point of interest count of 1km area around a point of interest: 1.54\n# Median point of interest count of 1km area around a point of interest: 1.0\n# Sum point of interest count of 1km area around a point of interest: 154\n# Mean population count of 2km area around a point of interest: 3164.57\n# Median population count of 2km area around a point of interest: 1294.0\n# Sum population count of 2km area around a point of interest: 316457\n# Mean point of interest count of 2km area around a point of interest: 2.98\n# Median point of interest count of 2km area around a point of interest: 3.0\n# Sum point of interest count of 2km area around a point of interest: 298\n# Mean population count of 3km area around a point of interest: 6401.05\n# Median population count of 3km area around a point of interest: 3368.0\n# Sum population count of 3km area around a point of interest: 640105\n# Mean point of interest count of 3km area around a point of interest: 5.2\n# Median point of interest count of 3km area around a point of interest: 5.0\n# Sum point of interest count of 3km area around a point of interest: 520\n# Time taken for analysis: 0.7 seconds\n\ndemand.get_results_table()\n\n#   poi_id  population  poi_count   number_of_users total_mbps\n# 0 23dd6a45-3656-435b-b3b1-c16efab9daeb    {'population_1km': 377, 'population_2km': 2850...   {'poi_count_1km': 1, 'poi_count_2km': 4, 'poi_...   377 1885\n# 1 e13a657c-edf0-4013-92db-6c70136e3ac9    {'population_1km': 64, 'population_2km': 457, ...   {'poi_count_1km': 2, 'poi_count_2km': 6, 'poi_...   64  320\n# 2 de75c87b-2676-47be-8454-4c44c4e6f644    {'population_1km': 132, 'population_2km': 662,...   {'poi_count_1km': 2, 'poi_count_2km': 3, 'poi_...   132 660\n# 3 4267fc81-0e9f-40ca-84c8-84529958dc22    {'population_1km': 233, 'population_2km': 3626...   {'poi_count_1km': 1, 'poi_count_2km': 3, 'poi_...   233 1165\n# 4 ae0ccc6e-5f91-4a58-a60b-68e8ebcdc797    {'population_1km': 737, 'population_2km': 4656...   {'poi_count_1km': 2, 'poi_count_2km': 7, 'poi_...   737 3685\n</code></pre>"},{"location":"fiberpath/","title":"Fiber Path","text":""},{"location":"fiberpath/#overview","title":"Overview","text":"<p>The fiber path model identifies the shortest and most cost-effective paths for connecting unconnected points of interest (POIs) to the existing optical fiber network using the road network. By minimizing the total length of fiber required, this model reduces overall deployment costs while efficiently extending connectivity.</p> <p>To start with, the model connects POIs and fiber nodes to the existing road network using straight lines (unless they are already on the road network). Then, for each unconnected POI, it computes the shortest path to all fiber nodes. POIs that are already connected to the fiber network can also act as fiber nodes, from which the fiber network can be extended.</p> <p>Figure: Graph initialization and fiber path algorithm</p> <p></p> <p>At each step of the algorithm, new connections are made between connected and unconnected points as long as the length of the new connection is below a specified threshold. For example, it can be specified that no single fiber line should be longer than 5 kilometers.</p> <p>This approach enables economies of scale: POIs can act as relay points for neighboring POIs, enabling connectivity without each one needing to connect directly to a transmission node. This approach optimizes resource usage and simplifies network expansion.</p> <p>In practice, this model is an application of Kruskal's algorithm to find a Minimum Spanning Tree (MST) in a network graph, where the edges are the road network and the vertices are POIs and fiber nodes. The MST ensures the minimal fiber path necessary to connect all relevant points while adhering to road network constraints related to distance.</p> <p>Figure: Output of fiber path algorithm</p> <p></p> <p>Key features:</p> <ul> <li>Plans optimal fiber paths using road networks or direct line-of-sight connections</li> <li>Supports clustering of points for faster computations and regional planning</li> <li>Incorporates scale economies, allowing POIs to connect to other connected POIs</li> <li>Optimizes based on physical distance or operator profits (thus findings the paths that connect all POIs, while maximizing the potential revenue by laying down fiber through the most populous zones)</li> </ul>"},{"location":"fiberpath/#class-parameters","title":"Class Parameters","text":"Parameter Type Default Description points_of_interest <code>PointOfInterestCollection</code> Required Collection of points of interest to be connected transmission_nodes <code>TransmissionNodeCollection</code> Required Collection of transmission infrastructure nodes to connect to max_connection_distance <code>int</code> Required Maximum connection distance in meters using the selected distance_metric use_road_data <code>bool</code> Required If True, use road networks; if False, use direct line-of-sight scale_economies <code>bool</code> <code>True</code> If True, POIs can connect to other connected POIs; if False, POIs can only connect to transmission nodes n_clusters <code>int</code> <code>None</code> Number of clusters for analysis. If None, clustering is based on distance. If 1, no clustering is performed constrained <code>bool</code> <code>False</code> If True, each cluster must contain at least one transmission node network_type <code>str</code> <code>'all'</code> Road network type ('all', 'bike', 'walk', etc.) random_state <code>int</code> <code>0</code> Seed for random operations distance_metric <code>str</code> <code>'length'</code> Metric to optimize: 'length' (physical distance) or 'net_cost' (cost minus revenue) revenue_per_pop <code>int</code> <code>10</code> Estimated revenue per person along the fiber path fiber_cost_per_km <code>int</code> <code>5</code> Cost of fiber per kilometer population_handler <code>PopulationDataHandler</code> <code>None</code> Required for net_cost distance metric logger <code>Logger</code> <code>None</code> Logger instance for capturing messages. If None, a default logger will be created"},{"location":"fiberpath/#class-attributes","title":"Class Attributes","text":"Attribute Type Description points_of_interest <code>PointOfInterestCollection</code> Original collection of POIs transmission_nodes <code>TransmissionNodeCollection</code> Original collection of transmission nodes all_collection <code>EntityCollection</code> Combined collection of POIs and transmission nodes max_connection_distance <code>int</code> Maximum allowed connection distance use_road_data <code>bool</code> Flag indicating whether to use road data or line-of-sight scale_economies <code>bool</code> Flag indicating whether POIs can connect to other connected POIs n_clusters <code>int</code> Number of clusters for analysis distance_metric <code>str</code> Metric used for optimization analysis_param <code>dict</code> Dictionary storing configuration parameters analysis_stats <code>dict</code> Dictionary storing statistics (counts, lengths, times) fiber_path_dict <code>dict</code> Dictionary storing path information for each POI fiber_path_nodes <code>DataFrame</code> DataFrame containing nodes in the fiber path network fiber_path_edges <code>DataFrame</code> DataFrame containing edges in the fiber path network"},{"location":"fiberpath/#methods","title":"Methods","text":"Method Return Type Description perform_analysis(save_cache=True, use_cache=True, not_connected_only=False) <code>str</code> Executes the fiber path analysis with options for caching and incremental processing perform_multilength_analysis(max_connection_distances) <code>None</code> Runs analysis for multiple maximum connection distances get_results_table() <code>DataFrame</code> Returns fiber path information for each connected POI get_fp_edges_table() <code>DataFrame</code> Returns fiber path edges get_fp_nodes_table() <code>DataFrame</code> Returns fiber path nodes format_analysis_summary() <code>str</code> Formats the analysis statistics as a human-readable string summary connect_pois(graph_pdn, connected_idx, unconnected_idx, remainder_idx, graph_nx) <code>tuple</code> Connects unconnected POIs to the nearest connected point dynamically extract_paths(graph_pdn, fiber_path_dict) <code>DataFrame</code> Extracts fiber paths from the graph based on the fiber path dictionary get_fiber_path_graph(graph, paths) <code>nx.MultiGraph</code> Gets a graph representation of fiber paths get_fiber_path_nodes_edges(fiber_path_graph) <code>dict</code> Gets nodes and edges from the fiber path graph path_total_from_nx_graph(graph, node_list, metric) <code>float</code> Calculates the total path length or cost"},{"location":"fiberpath/#outputs","title":"Outputs","text":"<p>The <code>get_results_table()</code> method produces a DataFrame with the following columns: </p> <ul> <li>closest_node_id </li> <li>closest_node_distance</li> <li>connected_node_id</li> <li>connected_node_distance</li> <li>fiber_path</li> <li>upstream_node_id</li> <li>upstream_node_distance</li> </ul> <p>These are summarized in the diagram below. In this example, the points of interest are schools.</p> <p></p>"},{"location":"fiberpath/#example","title":"Example","text":"<pre><code>import pandas as pd\nfrom giga_inframapkit.entities.pointofinterest import PointOfInterestCollection\nfrom giga_inframapkit.entities.transmissionnode import TransmissionNodeCollection\nfrom giga_inframapkit.fiberpath.fiberpath import FiberPath\n\n# 1. Set up your data collections\n\npoi_df = pd.read_csv(\"input/points_of_interest.csv\")\npoi_collection = PointOfInterestCollection()\npoi_collection.load_from_records(poi_df.to_dict('records'))\n\ntransmission_node_df = pd.read_csv(\"input/transmission_nodes.csv\")\ntransmission_node_collection = TransmissionNodeCollection()\ntransmission_node_collection.load_from_records(transmission_node_df.to_dict('records'))\n\n# PointOfInterestCollection: 100 entities\n# TransmissionNodeCollection: 30 entities\n\n# 2. Create a FiberPath instance\n\nfiberpath = FiberPath(\n    points_of_interest = poi_collection, \n    transmission_nodes = transmission_node_collection, \n    max_connection_distance = 10000,  # 1km\n    use_road_data = True,\n    n_clusters = 1,  # No clustering of POIs\n    constrained = False,\n    network_type = \"all\",\n    random_state = 9,\n    distance_metric = \"length\",\n    logger = None\n    )\n\n# 3. Run the analysis\n\nfiberpath.perform_analysis()\n\n# INFO:fiberpath_ESP:Running analysis without clustering...\n# INFO:fiberpath_ESP:Processing population tif file...\n# INFO:fiberpath_ESP:Population tif file is processed!\n# INFO:fiberpath_ESP:Dynamically connecting points of interest...\n# Generating contraction hierarchies with 8 threads.\n# Setting CH node vector of size 35771\n# Setting CH edge vector of size 42545\n# Range graph removed 1186 edges of 85090\n# . 10% . 20% . 30% . 40% . 50% . 60% . 70% . 80% . 90% . 100%\n# Generating contraction hierarchies with 8 threads.\n# Setting CH node vector of size 35771\n# Setting CH edge vector of size 42545\n# Range graph removed 1186 edges of 85090\n# . 10% . 20% . 30% . 40% . 50% . 60% . 70% . 80% . 90% . 100%\n# Fiber Path Analysis Summary:\n# Number of points of interest: 100\n# Number of transmission nodes: 30\n# Number of unconnected points of interest in the original dataset: 100\n# Fiber path length (km): 277.59\n# Number of newly connected points of interest by fiber path: 100\n# Number of points of interest that cannot be connected by fiber path: 0\n# Time taken for analysis: 30.68 seconds\n\nfiberpath_results = fiberpath.get_results_table()\n\nfiberpath_results.head()\n\n# poi_id    closest_node_id closest_node_distance   connected_node_id   connected_node_distance fiber_path  upstream_node_id    upstream_node_distance  max_dist_km in_mst_solution n_conns\n# 0 f01b7a6c-8d4e-4a7c-89f8-ef79eff4aab5    b7e56176-ea86-45a8-b494-4a9cefb4a75b    4474.282580 4c378326-6260-476a-bf24-8862b7ada7e0    21846.181627    [4c378326-6260-476a-bf24-8862b7ada7e0, e8fc47f...   d94433a9-0da0-4fd5-af57-ddfb321fc525    3792.344302 inf True    5\n# 1 3c1b571e-ab30-4c81-832d-51bdfef51bba    c530d19a-1e10-4efb-83b3-69dd6d8dca30    1157.624367 c530d19a-1e10-4efb-83b3-69dd6d8dca30    1157.624367 [c530d19a-1e10-4efb-83b3-69dd6d8dca30]  c530d19a-1e10-4efb-83b3-69dd6d8dca30    1157.624367 inf True    1\n# 2 03116452-1288-434e-83d5-fed21199c4a8    090dcd28-f45e-42b6-be51-73fa90b3e7f7    916.358942  090dcd28-f45e-42b6-be51-73fa90b3e7f7    916.358942  [090dcd28-f45e-42b6-be51-73fa90b3e7f7]  090dcd28-f45e-42b6-be51-73fa90b3e7f7    916.358942  inf True    1\n# 3 775b863e-688e-45e8-b12e-956a3144bd35    541c5949-ab47-4a42-83df-2f5653718d5a    5241.324763 926790f6-1345-4cab-92eb-0d28185e2d54    15337.141260    [926790f6-1345-4cab-92eb-0d28185e2d54, 20de279...   0b373675-de87-476b-9262-a0f7d9fe97c7    1635.844092 inf True    5\n# 4 9c0cf673-558f-47f4-b008-68872ebfd0a1    0430c874-2cc1-4b96-858f-07bddf5de495    3372.765524 0430c874-2cc1-4b96-858f-07bddf5de495    3687.584338 [0430c874-2cc1-4b96-858f-07bddf5de495, bbd7b66...   8955c08a-d3a8-4dd0-872a-09489285a97a    2342.884136 inf True    3\n</code></pre>"},{"location":"inputdata/","title":"Datasets","text":"<p>This page summarizes the data user-provided required by the toolkit. The provided data must conform to the standards below.</p>"},{"location":"inputdata/#points-of-interest-poi","title":"Points of interest (POI)","text":"Column name Column type Levels Example Mandatory Definition poi_id UUID 123e4567-e89b-12d3-a456-426614174000 Yes Unique identifier for the POI dataset_id UUID 987fcdeb-51a2-12d3-a456-426614174000 Yes Unique identifier for the dataset lat float 36.7538 Yes Latitude coordinate lon float 3.0588 Yes Longitude coordinate poi_type string school No Type of point of interest is_public boolean True No Whether the POI is public or private poi_subtype string primary school No Specific subtype of the POI country_code string DZA Yes ISO 3166-1 alpha-3 country code is_connected boolean True Yes Whether the POI has connectivity connectivity_type string fiber Yes Type of internet connectivity"},{"location":"inputdata/#cell-sites","title":"Cell sites","text":"Column name Column type Levels Example Mandatory Definition ict_id UUID 123e4567-e89b-12d3-a456-426614174000 Yes Cell tower identifier dataset_id UUID 987fcdeb-51a2-12d3-a456-426614174000 Yes Unique identifier for the dataset latitude float 38.988755 Yes Cell tower geographical latitude longitude float 1.401938 Yes Cell tower geographical longitude operator_name string TelOperator No Mobile network operator name radio_type string 2G, 3G, 4G, 5G 4G Yes Type of radio transmission technology antenna_height_m float 25 Yes Antenna height on the tower or building backhaul_type string fiber, microwave, satellite fiber No Type of backhaul connectivity of the cell tower backhaul_throughput_mbps float 1000 No Equipped throughput of the backhaul"},{"location":"inputdata/#transmission-nodes","title":"Transmission nodes","text":"Column name Column type Levels Example Mandatory Definition ict_id UUID 123e4567-e89b-12d3-a456-426614174000 Yes Node identifier dataset_id UUID 987fcdeb-51a2-12d3-a456-426614174000 Yes Unique identifier for the dataset latitude float 38.988755 Yes Geographical latitude longitude float 1.401938 Yes Geographical longitude operator_name string TelOperator No Name of the mobile operator infrastructure_type string fiber, microwave, other fiber Yes Type of Infrastructure node_status string operational, planned, under construction operational Yes Status of the node equipped_capacity_mbps float 1000 No Equipped bandwidth ready for use to connect subscribers potential_capacity_mbps float 2000 No Total theoretical bandwidth available for subscriber connections"},{"location":"inputdata/#mobile-coverage","title":"Mobile coverage","text":"Column name Column type Levels Example Mandatory Definition fid str 123e4567-e89b-12d3-a456-426614174000 Yes Unique identifier for polygons coverage int 1 Yes Should be equal to 1 for all rows geometry geometry POLYGON((-74.0060 40.7128, -73.9857 40.7484, -73.9772 40.7516, -74.0060 40.7128)) Yes Mobile coverage polygons"},{"location":"integrations/","title":"Model Integration Framework","text":"<p>The diagram below summarizes how the datasets are used by each model, and how the different models can be used together in an integrated way.</p> <p>In the first step, the <code>Proximity</code>, <code>Coverage</code>, <code>Demand</code>, <code>Visibility</code> and <code>FiberPath</code> models assess the feasibility of four technologies below.</p> <p>Figure. Technologies.</p> <p></p> <p>In the second step, the <code>Cost</code> and <code>Technology Assignment</code> models determine the optimal connectivity solution for each Point of Interest (POI).</p> <p>Figure. Integration between toolkit models.</p> <p></p>"},{"location":"proximity/","title":"Proximity","text":""},{"location":"proximity/#overview","title":"Overview","text":"<p>The Proximity class calculates distances between Points of Interest (POIs) and telecommunications infrastructure elements. It performs distance calculations to find the nearest cell sites and transmission nodes for each POI.</p> <p>Key features:</p> <ul> <li>Calculates distances to the nearest infrastructure elements by type (2G/3G/4G/5G cell sites, fiber nodes)</li> <li>Uses Haversine formula to account for Earth's curvature in distance calculations</li> <li>Efficiently processes large datasets using kd trees for nearest-neighbor searches</li> <li>Provides both raw distance data and summary statistics</li> </ul>"},{"location":"proximity/#class-parameters","title":"Class parameters","text":""},{"location":"proximity/#required","title":"Required","text":"<ul> <li>points_of_interest (<code>PointOfInterestCollection</code>): Collection of points of interest for which proximity will be calculated.</li> <li>cell_sites (<code>CellSiteCollection</code>): Collection of cell site locations with attributes including radio type (2G, 3G, 4G, 5G).</li> <li>transmission_nodes (<code>TransmissionNodeCollection</code>): Collection of transmission infrastructure nodes with attributes including transmission medium type.</li> </ul>"},{"location":"proximity/#optional","title":"Optional","text":"<ul> <li>logger (<code>logging.Logger</code>, optional): Logger instance for capturing messages. If None, a default logger will be created.</li> </ul>"},{"location":"proximity/#class-attributes","title":"Class attributes","text":"<ul> <li>points_of_interest: Original collection of POIs</li> <li>cell_sites: Original collection of all cell sites</li> <li>transmission_nodes: Original collection of all transmission nodes</li> <li>cell_sites_2g/3g/4g/5g: Filtered collections by radio type</li> <li>transmission_nodes_fiber: Filtered collection of fiber-based transmission nodes</li> <li>analysis_param: Dictionary for storing configuration parameters</li> <li>analysis_stats: Dictionary storing statistics (counts of elements, mean distances)</li> <li>analysis_results: Dictionary storing raw results (distances from each POI to infrastructure)</li> </ul>"},{"location":"proximity/#methods","title":"Methods","text":"<ul> <li>perform_analysis(): Executes the proximity analysis for all POIs and infrastructure elements.</li> <li>get_results_table(): Returns a formatted DataFrame with the analysis results in a structured format.</li> <li>get_storage_table(): Returns a DataFrame with the raw analysis results.</li> <li>format_analysis_summary(): Formats the analysis statistics as a human-readable string summary.</li> </ul>"},{"location":"proximity/#example","title":"Example","text":"<pre><code>import pandas as pd\nfrom giga_inframapkit.entities.pointofinterest import PointOfInterestCollection\nfrom giga_inframapkit.entities.cellsite import CellSiteCollection\nfrom giga_inframapkit.entities.transmissionnode import TransmissionNodeCollection\nfrom giga_inframapkit.proximity import Proximity\n\n# 1. Set up your data collections\n\ndataset_ids = {\n    'pointofinterest': 'points_of_interest.csv',\n    'cellsite': 'cell_sites.csv',\n    'transmissionnode': 'transmission_nodes.csv'\n}\n\ndata_collections = {\n    'pointofinterest': PointOfInterestCollection(),\n    'cellsite': CellSiteCollection(),\n    'transmissionnode': TransmissionNodeCollection()\n}\n\nfor data_category, filepath in dataset_ids.items():\n    df = pd.read_csv(f\"input/{filepath}\").to_dict('records')\n    data_collections[data_category].load_from_records(records)\n\n# PointOfInterestCollection: 100 entities\n# CellSiteCollection: 100 entities\n# TransmissionNodeCollection: 30 entities\n\n# 2. Create a Proximity analysis instance\n\nproximity = Proximity(\n    points_of_interest=poi_collection,\n    cell_sites=cell_sites,\n    transmission_nodes=transmission_nodes\n)\n\n\n# 3. Run the analysis\n\nproximity.perform_analysis()\n\n# Proximity Analysis Summary:\n# Number of points of interest: 100\n# Number of cell sites: 100\n# Number of transmission nodes: 30\n# Number of 2G cell sites: 6\n# Number of 3G cell sites: 30\n# Number of 4G cell sites: 64\n# Number of 5G cell sites: 0\n# Number of fiber nodes: 30\n# Mean cell site distance: 1267.17\n# Mean transmission node distance: 2451.69\n# Mean 2G cell site distance: 5647.04\n# Mean 3G cell site distance: 2419.78\n# Mean 4G cell site distance: 1606.58\n# Mean fiber node distance: 2451.69\n# Time taken for analysis: 0.0 seconds\n\n# 4. Inspect output\n\np_results = proximity.get_results_table()\np_results.head()\n\n#   poi_id  cell_site_dist  transmission_node_dist\n# 0 23dd6a45-3656-435b-b3b1-c16efab9daeb    {'any': 1158, '2G': 2365, '3G': 2475, '4G': 11...   {'any': 2559, 'fiber': 2559}\n# 1 e13a657c-edf0-4013-92db-6c70136e3ac9    {'any': 2817, '2G': 10258, '3G': 3967, '4G': 2...   {'any': 1808, 'fiber': 1808}\n# 2 de75c87b-2676-47be-8454-4c44c4e6f644    {'any': 646, '2G': 4049, '3G': 1086, '4G': 646...   {'any': 3183, 'fiber': 3183}\n# 3 4267fc81-0e9f-40ca-84c8-84529958dc22    {'any': 1066, '2G': 1066, '3G': 2863, '4G': 13...   {'any': 1678, 'fiber': 1678}\n# 4 ae0ccc6e-5f91-4a58-a60b-68e8ebcdc797    {'any': 462, '2G': 7196, '3G': 2288, '4G': 462...   {'any': 1615, 'fiber': 1615}\n\n</code></pre>"},{"location":"visibility/","title":"Visibility","text":""},{"location":"visibility/#overview","title":"Overview","text":"<p>The Visibility module provides tools to analyze line-of-sight connectivity between different infrastructure components. It determines whether points of interest (POIs) have clear line-of-sight with cell sites or with other POIs, accounting for terrain elevation, Earth's curvature, and antenna heights. Line-of-sight is required to establish the feasibility of radio links between points of interest (POIs) and cell sites using visibility analysis. The analysis uses open topography data from the Shuttle Radar Topography Mission (SRTM), which provides 30-meter resolution elevation data.</p> <p>Figure: Visible cell site</p> <p></p> <p>Figure: Obstructed cell site</p> <p></p> <p>Key Features:</p> <ul> <li>Line-of-sight analysis between points considering terrain elevation (SRTM data)</li> <li>Earth curvature and atmospheric refraction modeling</li> <li>Configurable search radius and antenna heights</li> <li>Support for different cellular radio types (2G, 3G, 4G, 5G)</li> <li>Detailed results including visibility status, distances, and azimuth angles</li> </ul>"},{"location":"visibility/#base-class-visibility","title":"Base Class: Visibility","text":"<p>The <code>Visibility</code> class serves as the foundation for visibility analyses.</p>"},{"location":"visibility/#class-parameters","title":"Class Parameters","text":"Parameter Type Default Description points_of_interest <code>PointOfInterestCollection</code> Required Collection of points of interest cell_sites <code>CellSiteCollection</code> None Collection of cell sites srtm_data_handler <code>SRTMDataHandler</code> None Handler for SRTM elevation data search_radius <code>int</code> 35 Maximum distance (km) to search for visibility num_visible <code>int</code> 3 Number of visible sites/POIs to find poi_antenna_height <code>float</code> 15 Antenna height at POI locations (meters) allowed_radio_types <code>list</code> ['unknown', '2G', '3G', '4G', '5G'] Radio types to include earth_radius <code>float</code> 6371 Earth radius in kilometers refraction_coef <code>float</code> 0 Atmospheric refraction coefficient use_srtm bool <code>True</code> Whether to use SRTM elevation data logger Logger <code>None</code> Logger instance"},{"location":"visibility/#class-attributes","title":"Class Attributes","text":"Attribute Type Description points_of_interest <code>PointOfInterestCollection</code> Collection of points of interest cell_sites <code>CellSiteCollection</code> Collection of cell sites srtm_data_handler <code>SRTMDataHandler</code> Handler for SRTM elevation data search_radius <code>int</code> Maximum search distance in meters analysis_param <code>dict</code> Parameters used for the analysis analysis_stats <code>dict</code> Statistics about the analysis run logger <code>Logger</code> Logger instance for the class"},{"location":"visibility/#methods","title":"Methods","text":"Method Return Type Description retrieve_srtm_data_files() <code>None</code> Downloads required SRTM elevation data get_antenna_height(point) <code>float</code> Gets antenna height for a point check_visibility(source, target, use_srtm, srtm_collection, search_radius) <code>tuple</code> Determines if target is visible from source considering terrain"},{"location":"visibility/#visibilitycell-cell-sites-visible-from-pois","title":"VisibilityCell: Cell Sites Visible from POIs","text":""},{"location":"visibility/#class-attributes_1","title":"Class Attributes","text":"Attribute Type Description analysis_results <code>dict</code> Dictionary storing analysis results per POI analysis_stats <code>dict</code> Statistics about the analysis run analysis_param <code>dict</code> Parameters used for the analysis"},{"location":"visibility/#methods_1","title":"Methods","text":"Method Return Type Description perform_analysis() <code>None</code> Executes visibility analysis, finding visible cell sites for each POI get_results_table() <code>DataFrame</code> Returns formatted results with detailed visibility information get_storage_table() <code>DataFrame</code> Returns raw analysis results as a DataFrame format_analysis_summary() <code>str</code> Returns a human-readable summary of analysis statistics retrieve_srtm_data_files() <code>None</code> Downloads required SRTM elevation data check_visibility() <code>tuple</code> Determines if target is visible from source considering terrain"},{"location":"visibility/#visibilitypoi-points-of-interest-visible-to-each-other","title":"VisibilityPOI: Points of Interest Visible to Each Other","text":""},{"location":"visibility/#class-attributes_2","title":"Class Attributes","text":"Attribute Type Description analysis_results <code>DataFrame</code> DataFrame storing source-target pairs with visibility status"},{"location":"visibility/#methods_2","title":"Methods","text":"Method Return Type Description perform_analysis() <code>None</code> Computes visibility between all pairs of POIs get_results_table() <code>DataFrame</code> Returns a symmetrically formatted visibility graph retrieve_srtm_data_files() <code>None</code> Downloads required SRTM elevation data check_visibility() <code>tuple</code> Determines if target is visible from source considering terrain"},{"location":"visibility/#example","title":"Example","text":"<pre><code>import pandas as pd\nfrom giga_inframapkit.entities.pointofinterest import PointOfInterestCollection\nfrom giga_inframapkit.entities.cellsite import CellSiteCollection\nfrom giga_inframapkit.handlers.srtmdatahandler import SRTMDataHandler\nfrom giga_inframapkit.visibility.visibility import VisibilityCell, VisibilityPOI\n\n# 1. Set up your data collections\n\npoi_df = pd.read_csv(\"input/points_of_interest.csv\") \npoi_collection = PointOfInterestCollection() \npoi_collection.load_from_records(poi_df.to_dict('records'))\n\n# PointOfInterestCollection: 104 entities\n\ncell_site_df = pd.read_csv(\"input/cell_sites.csv\") \ncell_site_collection = CellSiteCollection() \ncell_site_collection.load_from_records(cell_site_df.to_dict('records'))\n\n# CellSiteCollection: 34 entities\n\n# 2. Set up the elevation data handler, that downloads a raster file with elevation data into the data_dir\n\nsrtm_data_handler = SRTMDataHandler(srtm_directory=f'/input/srtm1', logger=None)\n\n# 3. Perform POI to cell site visibility\n\nvisibility_cellsites = VisibilityCell(\n    points_of_interest=poi_collection,\n    cell_sites=cell_site_collection,\n    srtm_data_handler=srtm_data_handler,\n    search_radius=35,\n    num_visible=3,\n    poi_antenna_height=25,\n    allowed_radio_types=[\"4G\", \"5G\"],\n    earth_radius=6371,\n    refraction_coef=0,\n    logger=None\n)\n\nvisibility_cellsites.perform_analysis()\n\n# INFO:visibility_STP:Locating SRTM data files...\n# INFO:visibility_STP:0 data file(s) to download.\n# INFO:visibility_STP:Downloading SRTM data files...\n# INFO:visibility_STP:Fetching from ITU public storage\n# INFO:visibility_STP:Filelist specified, downloading only selected files\n# INFO:visibility_STP:Downloaded completed\n# INFO:visibility_STP:Using 8 processes for parallel computation\n# INFO:visibility_STP:Processing 104 points of interest\n# INFO:visibility_STP:Checking cell site visibility:   0%|          | 0/104 [00:00&lt;?, ?it/s]\n# INFO:visibility_STP:Checking cell site visibility:   1%|          | 1/104 [00:02&lt;03:46,  2.20s/it]\n# INFO:visibility_STP:Checking cell site visibility:  18%|#8        | 19/104 [00:02&lt;00:08,  9.85it/s]\n# INFO:visibility_STP:Checking cell site visibility:  36%|###5      | 37/104 [00:02&lt;00:03, 19.56it/s]\n# INFO:visibility_STP:Checking cell site visibility: 100%|##########| 104/104 [00:02&lt;00:00, 35.79it/s]\n# Visibility Analysis Summary:\n# Number of points of interest: 104\n# Number of cell sites: 34\n# Total visibility checks performed: 1803\n# Average visibility checks per point of interest: 17.34\n# Time taken for SRTM data download: 0.11 seconds\n# Time taken for analysis: 3.0 seconds\n# Total time elapsed: 3.11 seconds\n\ncellsites_results_table = visibility_cellsites.get_results_table()\n\ncellsites_results_table.head()\n\n# poi_id    ict_id  radio_type  ground_distance antenna_los_distance    azimuth_angle   geometry    is_visible  num_visible order\n# 0 be6dc17a-57df-4709-bff1-18f433f7df71    4381fb37-07f8-465a-a654-6bc8df169be0    4G  269 269 211.41  LINESTRING (6.7332108 0.3300316, 6.73195 0.327...   True    3   1\n# 1 be6dc17a-57df-4709-bff1-18f433f7df71    7c4d5ac9-c381-485e-9c3f-99fbb062c837    4G  815 815 353.02  LINESTRING (6.7332108 0.3300316, 6.732319444 0...   True    3   2\n# 2 be6dc17a-57df-4709-bff1-18f433f7df71    cb6229b5-b934-4d5f-a7c1-39f33e1b1d6f    4G  881 881 77.87   LINESTRING (6.7332108 0.3300316, 6.740961111 0...   True    3   3\n# 3 7f4bf645-3665-4658-9913-edcb3fba3b2d    226b6f88-aac8-41af-8c88-6fd30b561afa    4G  683 683 21.55   LINESTRING (6.7235979 0.3330804, 6.725855556 0...   True    3   1\n# 4 7f4bf645-3665-4658-9913-edcb3fba3b2d    b4fbe775-c7e9-4752-b21c-883b84ea08ad    4G  867 869 257.62  LINESTRING (6.7235979 0.3330804, 6.715980556 0...   True    3   2\n\n# 4. Perform POI to POI visibility\n\nvisibility_pois = VisibilityPOI(\n    points_of_interest=poi_collection, \n    cell_sites=cell_site_collection, \n    srtm_data_handler = srtm_data_handler,\n    search_radius = 35,\n    poi_antenna_height = 25,\n    earth_radius = 6371,\n    refraction_coef = 0,\n    logger = None\n    )\n\nvisibility_pois.perform_analysis()\n\n# INFO:visibility_STP:Locating SRTM data files...\n# INFO:visibility_STP:0 data file(s) to download.\n# INFO:visibility_STP:Downloading SRTM data files...\n# INFO:visibility_STP:Fetching from ITU public storage\n# INFO:visibility_STP:Filelist specified, downloading only selected files\n# INFO:visibility_STP:Downloaded completed\n# INFO:visibility_STP:Using 8 processes for parallel computation\n# INFO:visibility_STP:Processing 5356 POI pairs\n# INFO:visibility_STP:Checking POI-to-POI visibility:   0%|          | 0/5356 [00:00&lt;?, ?it/s]\n# INFO:visibility_STP:Checking POI-to-POI visibility:   0%|          | 1/5356 [00:03&lt;4:55:26,  3.31s/it]\n# INFO:visibility_STP:Checking POI-to-POI visibility:   6%|6         | 335/5356 [00:03&lt;00:37, 135.50it/s]\n# INFO:visibility_STP:Checking POI-to-POI visibility:  19%|#8        | 1003/5356 [00:03&lt;00:10, 417.91it/s]\n# INFO:visibility_STP:Checking POI-to-POI visibility:  50%|####9     | 2673/5356 [00:05&lt;00:03, 842.69it/s]\n# INFO:visibility_STP:Checking POI-to-POI visibility:  56%|#####6    | 3007/5356 [00:05&lt;00:02, 903.04it/s]\n# INFO:visibility_STP:Checking POI-to-POI visibility: 100%|##########| 5356/5356 [00:05&lt;00:00, 999.95it/s]\n# INFO:visibility_STP:Analysis completed in 5.57 seconds\n\npois_results_table = visibility_pois.get_results_table()\n\npois_results_table.head()\n\n# poi_id    visible_pois    is_visible_pois\n# 0 09b90515-0ecc-4992-9d39-ae208e1c1fea    [1d24a1c9-9d48-4ea0-9aa3-cfdb65d228a1]  True\n# 1 0c16c2e8-db92-411b-a6f7-535fb1810e34    [967c9f47-5162-4f1b-aaa2-a7d77279d40c, 1e83e05...   True\n# 2 1205e5ef-5d91-47b7-8fc0-11ef019263e5    [c77898fa-9377-4552-b2a1-c719f3257dbf, 76d2158...   True\n# 3 1534adf8-b45c-443b-8e1d-87a504e6dc64    [82e467a9-50d8-407f-aa3a-58b68297b55b, 6dda061...   True\n# 4 192c1704-9e7e-4b7a-8ba7-0eed5ae771ad    [26ac2dc1-98e0-4ce7-8c1f-c6935b90ecc4, aeb454b...   True\n</code></pre>"}]}